/**
 * n8n Integration Service
 * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á React App ‡∏Å‡∏±‡∏ö n8n Workflow
 */

export interface N8nWorkflowConfig {
  workflowId: string
  webhookUrl: string
  apiKey: string
  instanceUrl: string
}

/**
 * ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö n8n
 */
export class N8nIntegration {
  private config: N8nWorkflowConfig

  constructor(config: N8nWorkflowConfig) {
    this.config = config
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á n8n Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gray Hat Analysis
   */
  async sendGrayHatAnalysis(data: any): Promise<any> {
    try {
      console.log('üéØ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢‡πÄ‡∏ó‡∏≤‡πÑ‡∏õ n8n:', this.config.webhookUrl)
      
      const grayHatPayload = {
        ...data,
        analysis_type: 'gray_hat_strategy',
        prompt_type: 'strategic_advisor',
        expert_mode: true,
        timestamp: new Date().toISOString(),
        source: 'gray-hat-analyzer'
      }

      const response = await fetch(this.config.webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.config.apiKey
        },
        body: JSON.stringify(grayHatPayload)
      })

      if (!response.ok) {
        throw new Error(`n8n Error: ${response.status}`)
      }

      const result = await response.json()
      console.log('‚úÖ n8n Gray Hat Analysis ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:', result)
      
      return result
    } catch (error) {
      console.error('‚ùå n8n Gray Hat Analysis Error:', error)
      throw error
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á n8n Webhook
   */
  async sendToWorkflow(data: any): Promise<any> {
    try {
      console.log('üöÄ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ n8n:', this.config.webhookUrl)
      
      const response = await fetch(this.config.webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': this.config.apiKey
        },
        body: JSON.stringify({
          ...data,
          timestamp: new Date().toISOString(),
          source: 'react-app'
        })
      })

      if (!response.ok) {
        throw new Error(`n8n Error: ${response.status}`)
      }

      const result = await response.json()
      console.log('‚úÖ n8n ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:', result)
      
      return result
    } catch (error) {
      console.error('‚ùå n8n Connection Error:', error)
      throw error
    }
  }

  /**
   * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Workflow ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ API Key)
   */
  async executeWorkflow(data: any): Promise<any> {
    try {
      const executeUrl = `${this.config.instanceUrl}/api/v1/workflows/${this.config.workflowId}/execute`
      
      const response = await fetch(executeUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-N8N-API-KEY': this.config.apiKey
        },
        body: JSON.stringify({ data })
      })

      if (!response.ok) {
        throw new Error(`n8n API Error: ${response.status}`)
      }

      return await response.json()
    } catch (error) {
      console.error('‚ùå n8n Workflow Execution Error:', error)
      throw error
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Workflow
   */
  async getWorkflowStatus(): Promise<any> {
    try {
      const statusUrl = `${this.config.instanceUrl}/api/v1/workflows/${this.config.workflowId}`
      
      const response = await fetch(statusUrl, {
        headers: {
          'X-N8N-API-KEY': this.config.apiKey
        }
      })

      if (!response.ok) {
        throw new Error(`n8n Status Error: ${response.status}`)
      }

      return await response.json()
    } catch (error) {
      console.error('‚ùå n8n Status Check Error:', error)
      return null
    }
  }
}

/**
 * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà Upload)
 */
export const defaultN8nConfig: N8nWorkflowConfig = {
  workflowId: 'uAacnMD8G3VHfTDj', // ‡∏à‡∏≤‡∏Å FBPostchecker888.json
  webhookUrl: 'https://mossad.app.n8n.cloud/webhook-test/fbpostshield/input',
  apiKey: 'Bearer YOUR_API_KEY_HERE', 
  instanceUrl: 'https://mossad.app.n8n.cloud'
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ
export const n8nService = new N8nIntegration(defaultN8nConfig)
