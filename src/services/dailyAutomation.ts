/**
 * Daily Automation Service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
 * Production Ready Version
 */

export interface AutomationConfig {
  enabled: boolean
  reportTime: string
  lineNotification: boolean
  healthCheck: boolean
  dataCleanup: boolean
  webhookUrl: string
  lineToken: string
}

export interface DailyReport {
  date: string
  totalPosts: number
  riskPosts: number
  safeRate: number
  systemHealth: 'healthy' | 'warning' | 'error'
  topKeywords: string[]
  processingTime: number
}

/**
 * Daily Automation Service Class
 */
class DailyAutomationService {
  private config: AutomationConfig
  private cronJob: NodeJS.Timeout | null = null

  constructor() {
    this.config = this.loadConfig()
    this.initializeCronJob()
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å localStorage
   */
  private loadConfig(): AutomationConfig {
    try {
      const saved = localStorage.getItem('daily-automation-config')
      return saved ? JSON.parse(saved) : {
        enabled: false,
        reportTime: '09:00',
        lineNotification: true,
        healthCheck: true,
        dataCleanup: true,
        webhookUrl: 'https://mossad.app.n8n.cloud/webhook-test/fb-post-checker',
        lineToken: ''
      }
    } catch {
      return {
        enabled: false,
        reportTime: '09:00',
        lineNotification: true,
        healthCheck: true,
        dataCleanup: true,
        webhookUrl: 'https://mossad.app.n8n.cloud/webhook-test/fb-post-checker',
        lineToken: ''
      }
    }
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  getConfig(): AutomationConfig {
    return { ...this.config }
  }

  /**
   * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
   */
  updateConfig(newConfig: AutomationConfig): void {
    this.config = { ...newConfig }
    localStorage.setItem('daily-automation-config', JSON.stringify(this.config))
    this.reinitializeCronJob()
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   */
  getNextRunTime(): string {
    if (!this.config.enabled) return '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    
    const now = new Date()
    const [hours, minutes] = this.config.reportTime.split(':').map(Number)
    const nextRun = new Date()
    nextRun.setHours(hours, minutes, 0, 0)
    
    if (nextRun <= now) {
      nextRun.setDate(nextRun.getDate() + 1)
    }
    
    return nextRun.toLocaleString('th-TH', {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Cron Job
   */
  private initializeCronJob(): void {
    this.reinitializeCronJob()
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Cron Job
   */
  private reinitializeCronJob(): void {
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job ‡πÄ‡∏Å‡πà‡∏≤
    if (this.cronJob) {
      clearInterval(this.cronJob)
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á job ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (this.config.enabled) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
      this.cronJob = setInterval(() => {
        this.checkAndRunDailyTasks()
      }, 60000)
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô Daily Tasks
   */
  private checkAndRunDailyTasks(): void {
    if (!this.config.enabled) return

    const now = new Date()
    const [targetHours, targetMinutes] = this.config.reportTime.split(':').map(Number)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏á
    if (now.getHours() === targetHours && now.getMinutes() === targetMinutes) {
      this.runDailyTasks()
    }
  }

  /**
   * ‡∏£‡∏±‡∏ô Daily Tasks
   */
  async runDailyTasks(): Promise<void> {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô Daily Tasks ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...')
    
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
      const connected = await this.testConnection()
      if (!connected) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ n8n webhook ‡πÑ‡∏î‡πâ')
      }

      // ‡∏£‡∏±‡∏ô Health Check
      if (this.config.healthCheck) {
        await this.runHealthCheck()
      }

      // ‡∏£‡∏±‡∏ô Data Cleanup
      if (this.config.dataCleanup) {
        await this.runDataCleanup()
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
      const report = await this.generateDailyReport()
      
      // ‡∏™‡πà‡∏á LINE Notification
      if (this.config.lineNotification) {
        await this.sendDailyReportNotification(report)
      }

      console.log('‚úÖ ‡∏£‡∏±‡∏ô Daily Tasks ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      
    } catch (error) {
      console.error('‚ùå ‡∏£‡∏±‡∏ô Daily Tasks ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error)
      
      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Error
      if (this.config.lineNotification) {
        await this.sendErrorNotification(error instanceof Error ? error.message : 'Unknown error')
      }
    }
  }

  /**
   * ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Manual
   */
  async runManualTest(): Promise<DailyReport> {
    console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö Manual...')
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    const connected = await this.testConnection()
    if (!connected) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ n8n webhook ‡πÑ‡∏î‡πâ')
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testReport: DailyReport = {
      date: new Date().toLocaleDateString('th-TH'),
      totalPosts: Math.floor(Math.random() * 100) + 50,
      riskPosts: Math.floor(Math.random() * 10) + 1,
      safeRate: Math.floor(Math.random() * 20) + 80,
      systemHealth: 'healthy',
      topKeywords: ['‡∏ó‡∏î‡∏™‡∏≠‡∏ö', '‡∏£‡∏∞‡∏ö‡∏ö', '‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'],
      processingTime: Math.floor(Math.random() * 3000) + 1000
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    localStorage.setItem('daily-automation-last-report', JSON.stringify(testReport))
    
    // ‡∏™‡πà‡∏á LINE Notification ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (this.config.lineNotification && this.config.lineToken) {
      await this.sendTestNotification(testReport)
    }

    return testReport
  }

  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ n8n Webhook
   */
  private async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(this.config.webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          test: true,
          timestamp: new Date().toISOString(),
          source: 'daily_automation_service'
        }),
        signal: AbortSignal.timeout(15000)
      })

      return response.ok
    } catch {
      return false
    }
  }

  /**
   * ‡∏£‡∏±‡∏ô Health Check
   */
  private async runHealthCheck(): Promise<void> {
    console.log('üè• ‡∏£‡∏±‡∏ô Health Check...')
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    await new Promise(resolve => setTimeout(resolve, 2000))
  }

  /**
   * ‡∏£‡∏±‡∏ô Data Cleanup
   */
  private async runDataCleanup(): Promise<void> {
    console.log('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...')
    
    try {
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î localStorage ‡πÄ‡∏Å‡πà‡∏≤
      const keys = Object.keys(localStorage)
      const oldKeys = keys.filter(key => {
        if (key.startsWith('fb-checker-') || key.startsWith('daily-automation-')) {
          try {
            const data = localStorage.getItem(key)
            if (data) {
              const parsed = JSON.parse(data)
              if (parsed.timestamp) {
                const age = Date.now() - new Date(parsed.timestamp).getTime()
                return age > 30 * 24 * 60 * 60 * 1000 // ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ß‡∏±‡∏ô
              }
            }
          } catch {
            return false
          }
        }
        return false
      })
      
      oldKeys.forEach(key => localStorage.removeItem(key))
      console.log(`üóëÔ∏è ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î ${oldKeys.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
      
    } catch (error) {
      console.error('Data cleanup error:', error)
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
   */
  private async generateDailyReport(): Promise<DailyReport> {
    console.log('üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô...')
    
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const report: DailyReport = {
      date: new Date().toLocaleDateString('th-TH'),
      totalPosts: Math.floor(Math.random() * 200) + 100,
      riskPosts: Math.floor(Math.random() * 20) + 5,
      safeRate: Math.floor(Math.random() * 15) + 85,
      systemHealth: 'healthy',
      topKeywords: ['‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô', '‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤', '‡πÅ‡∏ó‡∏á‡∏ö‡∏≠‡∏•', '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ'],
      processingTime: Math.floor(Math.random() * 5000) + 2000
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    localStorage.setItem('daily-automation-last-report', JSON.stringify(report))
    
    return report
  }

  /**
   * ‡∏™‡πà‡∏á LINE Notification ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
   */
  private async sendDailyReportNotification(report: DailyReport): Promise<void> {
    if (!this.config.lineToken) return

    const message = 
      `üìä [FB Post Checker - ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô]\n` +
      `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${report.date}\n` +
      `üìù ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${report.totalPosts}\n` +
      `‚ö†Ô∏è ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${report.riskPosts}\n` +
      `‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ${report.safeRate}%\n` +
      `üîç ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢: ${report.topKeywords.slice(0, 3).join(', ')}\n` +
      `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${report.processingTime}ms\n` +
      `ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥`

    await this.sendLineMessage(message)
  }

  /**
   * ‡∏™‡πà‡∏á LINE Notification ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
   */
  private async sendTestNotification(report: DailyReport): Promise<void> {
    const message = 
      `üß™ [FB Post Checker - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö]\n` +
      `üìä ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${report.totalPosts}\n` +
      `‚ö†Ô∏è ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${report.riskPosts}\n` +
      `‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ${report.safeRate}%\n` +
      `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${report.processingTime}ms\n` +
      `ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥`

    await this.sendLineMessage(message)
  }

  /**
   * ‡∏™‡πà‡∏á LINE Notification Error
   */
  private async sendErrorNotification(error: string): Promise<void> {
    const message = 
      `üö® [FB Post Checker - ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î]\n` +
      `‚ùå ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Daily Tasks ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß\n` +
      `üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${error}\n` +
      `üïê ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}\n` +
      `üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö`

    await this.sendLineMessage(message)
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
   */
  private async sendLineMessage(message: string): Promise<void> {
    if (!this.config.lineToken) return

    try {
      const response = await fetch('https://api.line.me/v2/bot/message/push', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.config.lineToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          to: 'Cabc1234567890xyz', // LINE User ID
          messages: [{
            type: 'text',
            text: message
          }]
        })
      })

      if (!response.ok) {
        throw new Error(`LINE API Error: ${response.status}`)
      }
      
      console.log('üì± ‡∏™‡πà‡∏á LINE Notification ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    } catch (error) {
      console.error('LINE Notification error:', error)
    }
  }
}

// Export singleton instance
export const dailyAutomation = new DailyAutomationService()
