import { FacebookPost, AnalysisResult } from '@/types/facebook';

export class AnalysisService {
  private defaultBannedKeywords = [
    // Thai keywords
    '‡∏™‡πÅ‡∏Å‡∏°',
    '‡πÇ‡∏Å‡∏á',
    '‡∏Ç‡∏≠‡∏á‡∏õ‡∏•‡∏≠‡∏°',
    '‡πÅ‡∏ä‡∏£‡πå‡∏•‡∏π‡∏Å‡πÇ‡∏ã‡πà',
    '‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô',
    '‡πÅ‡∏ä‡∏£‡πå‡∏î‡πà‡∏ß‡∏ô',
    '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
    '‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á',
    '‡∏õ‡∏±‡πà‡∏ô‡∏´‡∏∏‡πâ‡∏ô',
    '‡∏û‡∏ô‡∏±‡∏ô',
    '‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô',
    '‡∏´‡∏ß‡∏¢',
    '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
    '‡∏£‡∏ß‡∏¢‡πÄ‡∏£‡πá‡∏ß',
    '‡∏ó‡∏≥‡πÄ‡∏á‡∏¥‡∏ô',
    // English keywords
    'scam',
    'fake',
    'fraud',
    'mlm',
    'pyramid',
    'get rich quick',
    'casino',
    'gambling',
    'lottery',
  ];

  private customKeywords: string[] = [];

  constructor(customKeywords?: string[]) {
    if (customKeywords) {
      this.customKeywords = customKeywords;
    }
    // Load from localStorage
    const stored = localStorage.getItem('banned_keywords');
    if (stored) {
      try {
        this.customKeywords = JSON.parse(stored);
      } catch (e) {
        console.error('Failed to parse stored keywords');
      }
    }
  }

  getBannedKeywords(): string[] {
    return [...this.defaultBannedKeywords, ...this.customKeywords];
  }

  setBannedKeywords(keywords: string[]) {
    this.customKeywords = keywords;
    localStorage.setItem('banned_keywords', JSON.stringify(keywords));
  }

  /**
   * Analyze a Facebook post for risky content
   */
  analyzePost(post: FacebookPost, postUrl: string): AnalysisResult {
    const message = post.message || '';
    const detectedKeywords: string[] = [];
    const detectedIssues: string[] = [];
    const allKeywords = this.getBannedKeywords();

    // Check for banned keywords
    allKeywords.forEach((keyword) => {
      const regex = new RegExp(keyword, 'gi');
      if (regex.test(message)) {
        if (!detectedKeywords.includes(keyword)) {
          detectedKeywords.push(keyword);
        }
      }
    });

    // Calculate risk score
    let riskScore = 0;

    // Keywords score (20 points each, max 60)
    riskScore += Math.min(detectedKeywords.length * 20, 60);

    // Pattern-based scoring
    // Phone numbers
    if (/(\d{3}[-.\s]?\d{3}[-.\s]?\d{4}|\d{10})/.test(message)) {
      riskScore += 15;
      detectedIssues.push('‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
    }

    // Bank account numbers
    if (/(\d{3}[-\s]?\d{1}[-\s]?\d{5}[-\s]?\d{1}|\d{10,12})/.test(message)) {
      riskScore += 10;
      detectedIssues.push('‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£');
    }

    // External URLs
    const urlMatches = message.match(/https?:\/\/[^\s]+/g);
    if (urlMatches && urlMatches.length > 0) {
      riskScore += 10;
      detectedIssues.push(`‡∏û‡∏ö URL ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (${urlMatches.length} ‡∏•‡∏¥‡∏á‡∏Å‡πå)`);
    }

    // Pyramid scheme patterns
    const pyramidPatterns = [
      /‡πÅ‡∏ä‡∏£‡πå.*‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/i,
      /‡∏ä‡∏ß‡∏ô.*‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô.*‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô/i,
      /‡∏™‡∏°‡∏±‡∏Ñ‡∏£.*‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/i,
      /‡∏Å‡∏î.*‡πÅ‡∏ä‡∏£‡πå.*‡πÄ‡∏á‡∏¥‡∏ô/i,
    ];

    pyramidPatterns.forEach((pattern) => {
      if (pattern.test(message)) {
        riskScore += 25;
        detectedIssues.push('‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ä‡∏£‡πå‡∏•‡∏π‡∏Å‡πÇ‡∏ã‡πà');
      }
    });

    // Money-related urgent messages
    if (/‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô|‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô|‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°|‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏ß‡∏¢.*‡πÄ‡∏á‡∏¥‡∏ô/i.test(message)) {
      riskScore += 15;
      detectedIssues.push('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô');
    }

    // Suspicious emoji patterns (too many money/rocket emojis)
    const moneyEmojiCount = (message.match(/üí∞|üíµ|üí¥|üí∂|üí∑|ü§ë/g) || []).length;
    if (moneyEmojiCount > 3) {
      riskScore += 10;
      detectedIssues.push('‡∏û‡∏ö emoji ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å');
    }

    // Cap at 100
    riskScore = Math.min(riskScore, 100);

    // Determine status
    let status: 'safe' | 'risky' | 'dangerous';
    let message_text: string;

    if (riskScore < 30) {
      status = 'safe';
      message_text = '‚úÖ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏î‡∏π‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢';
    } else if (riskScore < 70) {
      status = 'risky';
      message_text = '‚ö†Ô∏è ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
    } else {
      status = 'dangerous';
      message_text = 'üö® ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á! ‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î';
    }

    return {
      id: `analysis-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      postId: post.id,
      postUrl,
      status,
      riskScore,
      bannedKeywords: detectedKeywords,
      detectedIssues,
      message: message_text,
      timestamp: new Date().toISOString(),
      postData: post,
    };
  }

  /**
   * Analyze multiple posts
   */
  analyzePosts(posts: FacebookPost[]): AnalysisResult[] {
    return posts.map((post) => {
      const url = post.permalink_url || `https://facebook.com/${post.id}`;
      return this.analyzePost(post, url);
    });
  }
}

export const analysisService = new AnalysisService();
