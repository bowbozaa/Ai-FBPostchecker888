/**
 * Global Settings Service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å User
 * Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
 */

export interface GlobalConfig {
  // System Settings
  systemConfig: {
    appName: string
    version: string
    adminEmails: string[]
    maintenanceMode: boolean
  }
  
  // API Configuration  
  apiSettings: {
    openaiKey: string
    lineToken: string
    webhookUrl: string
    timeout: number
    retries: number
    /**
     * n8n Authorization header (‡πÄ‡∏ä‡πà‡∏ô "Bearer xxxxxx")
     * ‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ö‡∏Å‡∏±‡∏ö Webhook ‡∏Ç‡∏≠‡∏á n8n ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Header Auth ‡πÑ‡∏ß‡πâ
     */
    n8nApiKey?: string
  }

  // Automation Settings
  dailyAutomation: {
    enabled: boolean
    reportTime: string
    lineNotification: boolean
    healthCheck: boolean
    dataCleanup: boolean
    webhookUrl: string
    lineToken: string
  }

  // Keywords & Analysis
  keywords: string[]
  
  // Notification Settings
  notifications: {
    email: boolean
    line: boolean
    webhook: boolean
    sound: boolean
  }

  // Analysis Configuration
  analysis: {
    sensitivity: 'low' | 'medium' | 'high'
    autoProcess: boolean
    maxRiskLevel: number
    language: 'th' | 'en' | 'both'
  }

  // Last Updated Info
  lastUpdated: string
  updatedBy: string
}

/**
 * Global Settings Manager Class
 */
class GlobalSettingsManager {
  private readonly STORAGE_KEY = 'fb-checker-global-settings'
  private readonly ADMIN_ROLES = ['Administrator', 'Admin']
  
  private defaultConfig: GlobalConfig = {
    systemConfig: {
      appName: 'FB Post Checker',
      version: '2.0.0',
      adminEmails: ['admin@fbchecker.com'],
      maintenanceMode: false
    },
    apiSettings: {
      openaiKey: 'sk-...',
      lineToken: 'HY8Url...',
      webhookUrl: 'https://mossad.app.n8n.cloud/webhook-test/fb-post-checker',
      timeout: 30,
      retries: 3,
      n8nApiKey: '' // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    },
    dailyAutomation: {
      enabled: false,
      reportTime: '09:00',
      lineNotification: true,
      healthCheck: true,
      dataCleanup: true,
      webhookUrl: 'https://mossad.app.n8n.cloud/webhook-test/fb-post-checker',
      lineToken: ''
    },
    keywords: [
      '‡πÅ‡∏ó‡∏á‡∏ö‡∏≠‡∏•', '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ', '‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô', '‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤', '‡∏™‡∏•‡πá‡∏≠‡∏ï',
      '‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô', '‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡πà‡∏≤‡∏¢', '‡∏£‡∏ß‡∏¢‡πÄ‡∏£‡πá‡∏ß', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢', '‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏•‡∏≠‡∏°'
    ],
    notifications: {
      email: true,
      line: true,
      webhook: false,
      sound: true
    },
    analysis: {
      sensitivity: 'medium',
      autoProcess: true,
      maxRiskLevel: 3,
      language: 'th'
    },
    lastUpdated: new Date().toISOString(),
    updatedBy: 'system'
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
   */
  getGlobalConfig(): GlobalConfig {
    try {
      const saved = localStorage.getItem(this.STORAGE_KEY)
      if (saved) {
        const parsed = JSON.parse(saved)
        // Merge ‡∏Å‡∏±‡∏ö default ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å field
        // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ n8nApiKey ‡πÉ‡∏´‡πâ‡∏°‡∏µ field ‡πÄ‡∏™‡∏°‡∏≠
        const merged: GlobalConfig = { ...this.defaultConfig, ...parsed }
        merged.apiSettings = { ...this.defaultConfig.apiSettings, ...parsed.apiSettings }
        if (typeof merged.apiSettings.n8nApiKey === 'undefined') {
          merged.apiSettings.n8nApiKey = ''
        }
        return merged
      }
    } catch (error) {
      console.warn('Error loading global settings:', error)
    }
    
    return this.defaultConfig
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
   */
  updateGlobalConfig(
    updates: Partial<GlobalConfig>, 
    currentUser: { role: string; username: string }
  ): boolean {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (!this.ADMIN_ROLES.includes(currentUser.role)) {
      throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ')
    }

    try {
      const currentConfig = this.getGlobalConfig()
      const newConfig: GlobalConfig = {
        ...currentConfig,
        ...updates,
        lastUpdated: new Date().toISOString(),
        updatedBy: currentUser.username
      }

      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(newConfig))
      
      // Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      console.log(`üîß Global Settings updated by ${currentUser.username}:`, Object.keys(updates))
      
      return true
    } catch (error) {
      console.error('Error saving global settings:', error)
      return false
    }
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Administrator)
   */
  resetToDefault(currentUser: { role: string; username: string }): boolean {
    if (currentUser.role !== 'Administrator') {
      throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Reset ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Administrator ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
    }

    const resetConfig = {
      ...this.defaultConfig,
      lastUpdated: new Date().toISOString(),
      updatedBy: currentUser.username
    }

    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(resetConfig))
    console.log(`üîÑ Global Settings reset by ${currentUser.username}`)
    
    return true
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
   */
  canEditSettings(userRole: string): boolean {
    return this.ADMIN_ROLES.includes(userRole)
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
   */
  getLastUpdateInfo(): { lastUpdated: string; updatedBy: string } {
    const config = this.getGlobalConfig()
    return {
      lastUpdated: config.lastUpdated,
      updatedBy: config.updatedBy
    }
  }

  /**
   * Export ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON
   */
  exportSettings(): string {
    const config = this.getGlobalConfig()
    return JSON.stringify(config, null, 2)
  }

  /**
   * Import ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å JSON (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Administrator)
   */
  importSettings(
    jsonString: string, 
    currentUser: { role: string; username: string }
  ): boolean {
    if (currentUser.role !== 'Administrator') {
      throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Import ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Administrator ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
    }

    try {
      const importedConfig = JSON.parse(jsonString)
      
      // Validate basic structure
      if (!importedConfig.systemConfig || !importedConfig.apiSettings) {
        throw new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
      }

      const newConfig: GlobalConfig = {
        ...importedConfig,
        lastUpdated: new Date().toISOString(),
        updatedBy: `${currentUser.username} (imported)`
      }

      // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ field n8nApiKey
      newConfig.apiSettings = {
        ...this.defaultConfig.apiSettings,
        ...newConfig.apiSettings,
        n8nApiKey: newConfig.apiSettings.n8nApiKey ?? ''
      }

      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(newConfig))
      console.log(`üì• Settings imported by ${currentUser.username}`)
      
      return true
    } catch (error) {
      console.error('Import error:', error)
      throw new Error(`‡∏Å‡∏≤‡∏£ Import ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error instanceof Error ? error.message : 'Unknown error'}`)
    }
  }
}

// Export singleton instance
export const globalSettings = new GlobalSettingsManager()

// Backward compatibility functions
export const getGlobalConfig = () => globalSettings.getGlobalConfig()
export const updateGlobalConfig = (updates: Partial<GlobalConfig>, user: { role: string; username: string }) => 
  globalSettings.updateGlobalConfig(updates, user)
