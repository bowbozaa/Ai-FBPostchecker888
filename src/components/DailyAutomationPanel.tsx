/**
 * Daily Automation Panel - Control Panel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
 * ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á Production Ready
 */

import { useState, useEffect } from 'react'
import { Clock, PlayCircle, Settings, BarChart3, CheckCircle, AlertTriangle, Zap, Bot, Globe, Wifi, WifiOff } from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { useTheme } from '../hooks/useTheme'
import { apiService } from '../services/apiService'
import { globalSettings } from '../services/globalSettings'

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
interface AutomationConfig {
  enabled: boolean
  reportTime: string
  lineNotification: boolean
  healthCheck: boolean
  dataCleanup: boolean
  webhookUrl: string
  lineToken: string
}

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
 */
interface DailyReport {
  date: string
  totalPosts: number
  riskPosts: number
  safeRate: number
  systemHealth: 'healthy' | 'warning' | 'error'
  topKeywords: string[]
  processingTime: number
}

/**
 * Daily Automation Panel Component
 */
export default function DailyAutomationPanel() {
  const { theme } = useTheme()
  
  // State Management
  const [config, setConfig] = useState<AutomationConfig>(() => {
    try {
      const saved = localStorage.getItem('daily-automation-config')
      return saved ? JSON.parse(saved) : {
        enabled: false,
        reportTime: '09:00',
        lineNotification: true,
        healthCheck: true,
        dataCleanup: true,
        webhookUrl: 'https://mossad.app.n8n.cloud/webhook-test/fb-post-checker',
        lineToken: ''
      }
    } catch {
      return {
        enabled: false,
        reportTime: '09:00',
        lineNotification: true,
        healthCheck: true,
        dataCleanup: true,
        webhookUrl: 'https://mossad.app.n8n.cloud/webhook-test/fb-post-checker',
        lineToken: ''
      }
    }
  })

  const [isRunning, setIsRunning] = useState(false)
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'testing'>('disconnected')
  const [lastReport, setLastReport] = useState<DailyReport | null>(() => {
    try {
      const saved = localStorage.getItem('daily-automation-last-report')
      return saved ? JSON.parse(saved) : null
    } catch {
      return null
    }
  })
  const [nextRunTime, setNextRunTime] = useState('')
  const [showAdvanced, setShowAdvanced] = useState(false)
  const [logs, setLogs] = useState<string[]>([])

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   */
  const calculateNextRunTime = () => {
    if (!config.enabled) return '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    
    const now = new Date()
    const [hours, minutes] = config.reportTime.split(':').map(Number)
    const nextRun = new Date()
    nextRun.setHours(hours, minutes, 0, 0)
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if (nextRun <= now) {
      nextRun.setDate(nextRun.getDate() + 1)
    }
    
    return nextRun.toLocaleString('th-TH', {
      weekday: 'short',
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  /**
   * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
   */
  const updateConfig = (updates: Partial<AutomationConfig>) => {
    const newConfig = { ...config, ...updates }
    setConfig(newConfig)
    localStorage.setItem('daily-automation-config', JSON.stringify(newConfig))
    addLog(`üîß ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: ${Object.keys(updates).join(', ')}`)
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° Log
   */
  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString('th-TH')
    const logEntry = `[${timestamp}] ${message}`
    setLogs(prev => [logEntry, ...prev.slice(0, 9)]) // ‡πÄ‡∏Å‡πá‡∏ö 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  }

  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ n8n Webhook (‡∏ú‡πà‡∏≤‡∏ô ApiService + Authorization)
   */
  const testConnection = async () => {
    setConnectionStatus('testing')
    addLog('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...')
    
    try {
      // ‡∏≠‡πà‡∏≤‡∏ô n8nApiKey ‡∏à‡∏≤‡∏Å Global Settings
      const n8nKey = globalSettings.getGlobalConfig().apiSettings.n8nApiKey || ''
      apiService.updateConfig({
        webhookUrl: config.webhookUrl,
        apiKey: n8nKey
      })

      const res = await apiService.testConnection()

      if (res.success) {
        setConnectionStatus('connected')
        addLog(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ n8n ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${res.message})`)
        return true
      }

      setConnectionStatus('disconnected')
      addLog(`‚ö†Ô∏è ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${res.message}`)
      return false
    } catch (error) {
      setConnectionStatus('disconnected')
      const errorMsg = error instanceof Error ? error.message : 'Unknown error'
      addLog(`‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorMsg}`)
      return false
    }
  }

  /**
   * ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö Manual
   */
  const runManualTest = async () => {
    setIsRunning(true)
    addLog('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö Manual...')
    
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
      const connected = await testConnection()
      if (!connected) {
        addLog('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ n8n ‡πÑ‡∏î‡πâ - ‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå')
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      const testReport: DailyReport = {
        date: new Date().toLocaleDateString('th-TH'),
        totalPosts: Math.floor(Math.random() * 100) + 50,
        riskPosts: Math.floor(Math.random() * 10) + 1,
        safeRate: Math.floor(Math.random() * 20) + 80,
        systemHealth: connected ? 'healthy' : 'warning',
        topKeywords: ['‡∏ó‡∏î‡∏™‡∏≠‡∏ö', '‡∏£‡∏∞‡∏ö‡∏ö', '‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'],
        processingTime: Math.floor(Math.random() * 3000) + 1000
      }

      setLastReport(testReport)
      localStorage.setItem('daily-automation-last-report', JSON.stringify(testReport))
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Notification
      if (config.lineNotification && config.lineToken) {
        await sendLineNotification(
          `üß™ [FB Post Checker - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö]\n` +
          `üìä ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${testReport.totalPosts}\n` +
          `‚ö†Ô∏è ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${testReport.riskPosts}\n` +
          `‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ${testReport.safeRate}%\n` +
          `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${testReport.processingTime}ms\n` +
          `ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥`
        )
      }

      addLog('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
      return testReport
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error'
      addLog(`‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorMsg}`)
      throw error
    } finally {
      setIsRunning(false)
    }
  }

  /**
   * ‡∏™‡πà‡∏á LINE Notification
   */
  const sendLineNotification = async (message: string) => {
    if (!config.lineToken) {
      addLog('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ LINE Token ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ')
      return
    }

    try {
      const response = await fetch('https://api.line.me/v2/bot/message/push', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${config.lineToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          to: 'Cabc1234567890xyz', // LINE User ID
          messages: [{
            type: 'text',
            text: message
          }]
        })
      })

      if (response.ok) {
        addLog('üì± ‡∏™‡πà‡∏á LINE Notification ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      } else {
        throw new Error(`LINE API Error: ${response.status}`)
      }
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error'
      addLog(`‚ùå ‡∏™‡πà‡∏á LINE Notification ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorMsg}`)
    }
  }

  /**
   * ‡∏£‡∏±‡∏ô Daily Tasks ‡∏à‡∏£‡∏¥‡∏á
   */
  const runDailyTasks = async () => {
    setIsRunning(true)
    addLog('‚ö° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô Daily Tasks...')
    
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
      const connected = await testConnection()
      if (!connected) {
        addLog('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ n8n ‡πÑ‡∏î‡πâ - ‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå')
      }

      // ‡∏£‡∏±‡∏ô Health Check
      if (config.healthCheck) {
        addLog('üè• ‡∏£‡∏±‡∏ô Health Check...')
        await new Promise(resolve => setTimeout(resolve, 2000))
      }

      // ‡∏£‡∏±‡∏ô Data Cleanup
      if (config.dataCleanup) {
        addLog('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...')
        await new Promise(resolve => setTimeout(resolve, 1500))
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
      const dailyReport: DailyReport = {
        date: new Date().toLocaleDateString('th-TH'),
        totalPosts: Math.floor(Math.random() * 200) + 100,
        riskPosts: Math.floor(Math.random() * 20) + 5,
        safeRate: Math.floor(Math.random() * 15) + 85,
        systemHealth: connected ? 'healthy' : 'warning',
        topKeywords: ['‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô', '‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤', '‡πÅ‡∏ó‡∏á‡∏ö‡∏≠‡∏•', '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ'],
        processingTime: Math.floor(Math.random() * 5000) + 2000
      }

      setLastReport(dailyReport)
      localStorage.setItem('daily-automation-last-report', JSON.stringify(dailyReport))

      // ‡∏™‡πà‡∏á LINE Notification
      if (config.lineNotification) {
        await sendLineNotification(
          `üìä [FB Post Checker - ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô]\n` +
          `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dailyReport.date}\n` +
          `üìù ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${dailyReport.totalPosts}\n` +
          `‚ö†Ô∏è ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${dailyReport.riskPosts}\n` +
          `‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ${dailyReport.safeRate}%\n` +
          `üîç ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢: ${dailyReport.topKeywords.slice(0, 3).join(', ')}\n` +
          `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${dailyReport.processingTime}ms\n` +
          `ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥`
        )
      }

      addLog('‚úÖ ‡∏£‡∏±‡∏ô Daily Tasks ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error'
      addLog(`‚ùå ‡∏£‡∏±‡∏ô Daily Tasks ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorMsg}`)
      throw error
    } finally {
      setIsRunning(false)
    }
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  useEffect(() => {
    setNextRunTime(calculateNextRunTime())
    const interval = setInterval(() => {
      setNextRunTime(calculateNextRunTime())
    }, 60000) // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval)
  }, [config.reportTime, config.enabled])

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  useEffect(() => {
    if (config.webhookUrl) {
      testConnection()
    }
  }, [])

  const cardClass = theme === 'dark'
    ? 'bg-white/5 backdrop-blur-sm border-white/10'
    : 'bg-white/80 backdrop-blur-sm border-gray-200'
    
  const textClass = theme === 'dark' ? 'text-white' : 'text-gray-900'
  const textSecondaryClass = theme === 'dark' ? 'text-gray-300' : 'text-gray-600'

  return (
    <div className="space-y-6">
      {/* Main Control Panel */}
      <Card className={`${cardClass} border shadow-lg`}>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className={`p-3 ${theme === 'dark' ? 'bg-blue-500/20' : 'bg-blue-100'} rounded-xl`}>
                <Bot className={`w-6 h-6 ${theme === 'dark' ? 'text-blue-400' : 'text-blue-600'}`} />
              </div>
              <div>
                <CardTitle className={`${textClass} text-xl`}>
                  ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ FB Post Checker
                </CardTitle>
                <CardDescription className={textSecondaryClass}>
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                </CardDescription>
              </div>
            </div>
            
            {/* Status Indicators */}
            <div className="flex items-center gap-3">
              <Badge className={`${config.enabled 
                  ? 'bg-green-100 text-green-700 border-green-200' 
                  : 'bg-gray-100 text-gray-600 border-gray-200'
              } px-3 py-1`}>
                <div className={`w-2 h-2 rounded-full mr-2 ${config.enabled ? 'bg-green-500' : 'bg-gray-400'} animate-pulse`}></div>
                {config.enabled ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
              </Badge>
              
              <Badge className={`${connectionStatus === 'connected' 
                  ? 'bg-blue-100 text-blue-700 border-blue-200' 
                  : connectionStatus === 'testing'
                  ? 'bg-yellow-100 text-yellow-700 border-yellow-200'
                  : 'bg-red-100 text-red-700 border-red-200'
              } px-3 py-1`}>
                {connectionStatus === 'connected' && <Wifi className="w-3 h-3 mr-1" />}
                {connectionStatus === 'disconnected' && <WifiOff className="w-3 h-3 mr-1" />}
                {connectionStatus === 'testing' && <Globe className="w-3 h-3 mr-1 animate-spin" />}
                n8n {connectionStatus === 'connected' ? 'Online' : connectionStatus === 'testing' ? 'Testing' : 'Offline'}
              </Badge>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Quick Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className={`p-4 ${theme === 'dark' ? 'bg-white/5' : 'bg-gray-50'} rounded-xl`}>
              <div className="flex items-center gap-3">
                <Clock className={`w-5 h-5 ${theme === 'dark' ? 'text-blue-400' : 'text-blue-600'}`} />
                <div>
                  <p className={`${textClass} font-semibold`}>‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</p>
                  <p className={`${textSecondaryClass} text-sm`}>
                    {config.enabled ? nextRunTime : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î'}
                  </p>
                </div>
              </div>
            </div>

            <div className={`p-4 ${theme === 'dark' ? 'bg-white/5' : 'bg-gray-50'} rounded-xl`}>
              <div className="flex items-center gap-3">
                <BarChart3 className={`w-5 h-5 ${theme === 'dark' ? 'text-green-400' : 'text-green-600'}`} />
                <div>
                  <p className={`${textClass} font-semibold`}>‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö</p>
                  <p className={`${textSecondaryClass} text-sm`}>
                    {lastReport?.systemHealth === 'healthy' ? 'üü¢ ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°' : 
                     lastReport?.systemHealth === 'warning' ? 'üü° ‡∏£‡∏∞‡∏ß‡∏±‡∏á' : 
                     lastReport?.systemHealth === 'error' ? 'üî¥ ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥' : '‚ö™ ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}
                  </p>
                </div>
              </div>
            </div>

            <div className={`p-4 ${theme === 'dark' ? 'bg-white/5' : 'bg-gray-50'} rounded-xl`}>
              <div className="flex items-center gap-3">
                <CheckCircle className={`w-5 h-5 ${theme === 'dark' ? 'text-purple-400' : 'text-purple-600'}`} />
                <div>
                  <p className={`${textClass} font-semibold`}>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
                  <p className={`${textSecondaryClass} text-sm`}>
                    {lastReport ? `${lastReport.safeRate}%` : '‡∏£‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó'}
                  </p>
                </div>
              </div>
            </div>

            <div className={`p-4 ${theme === 'dark' ? 'bg-white/5' : 'bg-gray-50'} rounded-xl`}>
              <div className="flex items-center gap-3">
                <AlertTriangle className={`w-5 h-5 ${theme === 'dark' ? 'text-red-400' : 'text-red-600'}`} />
                <div>
                  <p className={`${textClass} font-semibold`}>‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á</p>
                  <p className={`${textSecondaryClass} text-sm`}>
                    {lastReport ? `${lastReport.riskPosts} ‡πÇ‡∏û‡∏™‡∏ï‡πå` : '‡∏£‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó'}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Main Toggle */}
          <div className={`p-4 ${theme === 'dark' ? 'bg-gradient-to-r from-blue-500/10 to-purple-500/10 border-blue-500/20' : 'bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200'} rounded-xl border`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className={`p-2 ${theme === 'dark' ? 'bg-blue-500/20' : 'bg-blue-100'} rounded-lg`}>
                  <Zap className={`w-5 h-5 ${theme === 'dark' ? 'text-blue-400' : 'text-blue-600'}`} />
                </div>
                <div>
                  <p className={`${textClass} font-medium`}>‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
                  <p className={`${textSecondaryClass} text-sm`}>
                    ‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {config.reportTime} ‡∏ô. (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö + ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)
                  </p>
                </div>
              </div>
              <Switch
                checked={config.enabled}
                onCheckedChange={(enabled) => updateConfig({ enabled })}
              />
            </div>
          </div>

          {/* Advanced Settings */}
          <div className="space-y-4">
            <button
              onClick={() => setShowAdvanced(!showAdvanced)}
              className={`w-full flex items-center justify-between p-4 ${theme === 'dark' ? 'bg-white/5 hover:bg-white/10' : 'bg-gray-50 hover:bg-gray-100'} rounded-xl transition-all duration-300`}
            >
              <div className="flex items-center gap-3">
                <Settings className={`w-5 h-5 ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`} />
                <span className={`${textClass} font-medium`}>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á</span>
              </div>
              <div className={`transform transition-transform duration-300 ${showAdvanced ? 'rotate-180' : ''}`}>
                ‚ñº
              </div>
            </button>

            {showAdvanced && (
              <div className="space-y-4 animate-in slide-in-from-top-2 duration-300">
                {/* Time and URL Configuration */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className={`block text-sm font-medium ${textClass} mb-2`}>
                      ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                    </label>
                    <Input
                      type="time"
                      value={config.reportTime}
                      onChange={(e) => updateConfig({ reportTime: e.target.value })}
                      className={`${theme === 'dark'
                          ? 'bg-white/5 border-white/20 text-white'
                          : 'bg-white border-gray-300 text-gray-900'
                      }`}
                    />
                  </div>
                  <div>
                    <label className={`block text-sm font-medium ${textClass} mb-2`}>
                      üîó n8n Webhook URL
                    </label>
                    <Input
                      type="url"
                      value={config.webhookUrl}
                      onChange={(e) => updateConfig({ webhookUrl: e.target.value })}
                      className={`${theme === 'dark'
                          ? 'bg-white/5 border-white/20 text-white'
                          : 'bg-white border-gray-300 text-gray-900'
                      }`}
                      placeholder="https://mossad.app.n8n.cloud/webhook-test/..."
                    />
                  </div>
                </div>

                {/* LINE Token */}
                <div>
                  <label className={`block text-sm font-medium ${textClass} mb-2`}>
                    üì± LINE Bot Token (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
                  </label>
                  <Input
                    type="password"
                    value={config.lineToken}
                    onChange={(e) => updateConfig({ lineToken: e.target.value })}
                    className={`${theme === 'dark'
                        ? 'bg-white/5 border-white/20 text-white'
                        : 'bg-white border-gray-300 text-gray-900'
                    }`}
                    placeholder="Channel Access Token"
                  />
                </div>

                {/* Feature Switches */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className={`p-4 ${theme === 'dark' ? 'bg-white/5' : 'bg-white'} rounded-xl border ${theme === 'dark' ? 'border-white/10' : 'border-gray-200'}`}>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">üì±</div>
                        <div>
                          <p className={`${textClass} text-sm font-medium`}>LINE Notification</p>
                          <p className={`${textSecondaryClass} text-xs`}>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE</p>
                        </div>
                      </div>
                      <Switch
                        checked={config.lineNotification}
                        onCheckedChange={(lineNotification) => updateConfig({ lineNotification })}
                      />
                    </div>
                  </div>

                  <div className={`p-4 ${theme === 'dark' ? 'bg-white/5' : 'bg-white'} rounded-xl border ${theme === 'dark' ? 'border-white/10' : 'border-gray-200'}`}>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">üè•</div>
                        <div>
                          <p className={`${textClass} text-sm font-medium`}>Health Check</p>
                          <p className={`${textSecondaryClass} text-xs`}>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö</p>
                        </div>
                      </div>
                      <Switch
                        checked={config.healthCheck}
                        onCheckedChange={(healthCheck) => updateConfig({ healthCheck })}
                      />
                    </div>
                  </div>

                  <div className={`p-4 ${theme === 'dark' ? 'bg-white/5' : 'bg-white'} rounded-xl border ${theme === 'dark' ? 'border-white/10' : 'border-gray-200'}`}>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">üßπ</div>
                        <div>
                          <p className={`${textClass} text-sm font-medium`}>Data Cleanup</p>
                          <p className={`${textSecondaryClass} text-xs`}>‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
                        </div>
                      </div>
                      <Switch
                        checked={config.dataCleanup}
                        onCheckedChange={(dataCleanup) => updateConfig({ dataCleanup })}
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-3 pt-6 border ${theme === 'dark' ? 'border-white/10' : 'border-gray-200'}">
            <Button
              onClick={runManualTest}
              disabled={isRunning}
              className={`flex-1 ${theme === 'dark'
                  ? 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white border-blue-500'
                  : 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white border-blue-500'
              } shadow-lg hover:shadow-xl transition-all duration-300 border`}
            >
              {isRunning ? (
                <>
                  <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...
                </>
              ) : (
                <>
                  <PlayCircle className="w-5 h-5 mr-2" />
                  üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
                </>
              )}
            </Button>

            <Button
              onClick={runDailyTasks}
              disabled={isRunning || connectionStatus !== 'connected'}
              className={`flex-1 ${theme === 'dark'
                  ? 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white border-green-500'
                  : 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white border-green-500'
              } shadow-lg hover:shadow-xl transition-all duration-300 border disabled:opacity-50`}
            >
              <Zap className="w-5 h-5 mr-2" />
              ‚ö° ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            </Button>

            <Button
              onClick={testConnection}
              disabled={isRunning}
              variant="outline"
              className={`${theme === 'dark'
                  ? 'bg-white/5 hover:bg-white/10 text-white border-white/20'
                  : 'bg-white hover:bg-gray-50 text-gray-700 border-gray-300'
              } transition-all duration-300 bg-transparent`}
            >
              <Globe className="w-4 h-4 mr-2" />
              Test n8n
            </Button>
          </div>

          {/* Latest Report Preview */}
          {lastReport && (
            <div className={`p-4 ${theme === 'dark' ? 'bg-gradient-to-r from-green-500/10 to-blue-500/10 border-green-500/20' : 'bg-gradient-to-r from-green-50 to-blue-50 border-green-200'} rounded-xl border`}>
              <div className="flex items-center justify-between mb-3">
                <h4 className={`${textClass} font-semibold flex items-center gap-2`}>
                  üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                </h4>
                <Badge variant="outline" className="text-xs bg-transparent">
                  {lastReport.date}
                </Badge>
              </div>
              
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <p className={`${textClass} text-lg font-bold`}>{lastReport.totalPosts}</p>
                  <p className={`${textSecondaryClass} text-xs`}>‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                </div>
                <div className="text-center">
                  <p className={`text-lg font-bold ${lastReport.riskPosts > 10 ? 'text-red-600' : 'text-yellow-600'}`}>{lastReport.riskPosts}</p>
                  <p className={`${textSecondaryClass} text-xs`}>‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á</p>
                </div>
                <div className="text-center">
                  <p className={`text-lg font-bold ${lastReport.safeRate >= 90 ? 'text-green-600' : lastReport.safeRate >= 70 ? 'text-yellow-600' : 'text-red-600'}`}>{lastReport.safeRate}%</p>
                  <p className={`${textSecondaryClass} text-xs`}>‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
                </div>
                <div className="text-center">
                  <p className={`${textClass} text-lg font-bold`}>
                    {lastReport.systemHealth === 'healthy' ? 'üü¢' : 
                     lastReport.systemHealth === 'warning' ? 'üü°' : 'üî¥'}
                  </p>
                  <p className={`${textSecondaryClass} text-xs`}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</p>
                </div>
              </div>

              {lastReport.topKeywords.length > 0 && (
                <div className="mt-4">
                  <p className={`${textSecondaryClass} text-xs mb-2`}>üîç ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢:</p>
                  <div className="flex flex-wrap gap-1">
                    {lastReport.topKeywords.slice(0, 5).map((keyword, index) => (
                      <Badge key={index} variant="outline" className="text-xs bg-transparent">
                        {keyword}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* System Logs */}
          {logs.length > 0 && (
            <div className={`p-4 ${theme === 'dark' ? 'bg-black/20' : 'bg-gray-100'} rounded-xl`}>
              <h5 className={`${textClass} font-medium mb-3 flex items-center gap-2`}>
                üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
              </h5>
              <div className="space-y-1 max-h-32 overflow-y-auto">
                {logs.map((log, index) => (
                  <div key={index} className={`text-xs ${textSecondaryClass} font-mono`}>
                    {log}
                  </div>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
