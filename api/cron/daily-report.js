/**
 * Vercel Cron Job - Daily Report
 * ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00 ‡∏ô.
 */

export default async function handler(req, res) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Cron Request ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (req.headers.authorization !== `Bearer ${process.env.CRON_SECRET}`) {
    return res.status(401).json({ error: 'Unauthorized' })
  }

  try {
    console.log('üöÄ Daily Report Cron Job ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...')

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Database)
    const report = {
      date: new Date().toISOString().split('T')[0],
      totalPosts: Math.floor(Math.random() * 100) + 50,
      riskPosts: Math.floor(Math.random() * 20) + 5,
      safeRate: Math.round((Math.random() * 20 + 75) * 10) / 10,
      systemHealth: 'healthy'
    }

    report.safeRate = Math.round(((report.totalPosts - report.riskPosts) / report.totalPosts) * 100 * 10) / 10

    // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏õ n8n Webhook
    const webhookUrl = process.env.REACT_APP_WEBHOOK_URL || 'https://mossad.app.n8n.cloud/webhook/297f5471-0641-43d7-8b72-36f4e88eb5aa'
    
    const webhookResponse = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        type: 'daily_report',
        report: report,
        timestamp: new Date().toISOString(),
        source: 'vercel_cron'
      })
    })

    console.log('üì§ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏õ n8n:', webhookResponse.ok ? '‚úÖ' : '‚ùå')

    // ‡∏™‡πà‡∏á LINE Notification
    if (process.env.REACT_APP_LINE_BOT_TOKEN) {
      const lineMessage = `üìä [FB Post Checker] ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
      
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${report.date}
üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:
  ‚Ä¢ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${report.totalPosts}
  ‚Ä¢ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${report.riskPosts}  
  ‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ${report.safeRate}%

üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: ${report.systemHealth}

ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ Vercel Cron`

      const lineResponse = await fetch('https://api.line.me/v2/bot/message/push', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.REACT_APP_LINE_BOT_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          to: process.env.REACT_APP_LINE_USER_ID || 'Cabc1234567890xyz',
          messages: [{
            type: 'text',
            text: lineMessage
          }]
        })
      })

      console.log('üì± ‡∏™‡πà‡∏á LINE Notification:', lineResponse.ok ? '‚úÖ' : '‚ùå')
    }

    return res.status(200).json({
      success: true,
      message: 'Daily report sent successfully',
      report: report,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('‚ùå Daily Report Cron Error:', error)
    return res.status(500).json({
      error: 'Internal server error',
      message: error.message
    })
  }
}
